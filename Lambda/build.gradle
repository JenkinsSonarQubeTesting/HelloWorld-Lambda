version '1.0-SNAPSHOT'

subprojects { sp ->
    task buildZip(type: Zip) {
        from compileJava
        from processResources
        into('lib') {
            from configurations.compileClasspath
        }
    }

    build.dependsOn buildZip

    afterEvaluate {
        task checkS3(type: Exec) {
            commandLine 'aws', 's3', 'ls',
                    "s3://carter-jenkins-test-bucket/${project.rootProject.name}/${sp.name}/${sp.name}.${sp.version}/${sp.name}-${sp.version}.zip",
                    '--region', 'us-east-1'
            ignoreExitValue true
            ext {
                exitValue = 0
                //execResult.exitValue
            }
        }
        buildZip.dependsOn checkS3
        buildZip.doFirst {
            if (tasks.checkS3.exitValue != 0) { throw new StopExecutionException() }
        }

        task uploadToS3(type: Exec) {
            dependsOn checkS3
            commandLine 'aws', 's3', 'cp',
                    buildZip.archivePath,
                    "s3://carter-jenkins-test-bucket/${project.rootProject.name}/${sp.name}/${sp.name}.${sp.version}/",
                    '--region', 'us-east-1'
        }

        uploadToS3.onlyIf {tasks.checkS3.exitValue != 0}

        task deployTerraform (type: Exec){
            commandLine "terraform", "apply",
                    '-var', "aws_user_ID=${project.findProperty('USER_ID') ?: ''}",
                    '-var', "role_name=${project.findProperty('ROLE_NAME') ?: ''}",
                    '-var', "region=us-east-1",
                    '-var', "version=${sp.version}",
                    '-var', "name=${sp.name}",
                    '-var', "group=${project.rootProject.name}",
                    '-var', "handler_class=${sp.ext.handlerClassName}",
                    "-input=false",
                    "-auto-approve"
        }

        deployTerraform.dependsOn initTerraform
    }

    task initTerraform (type: Exec){
        commandLine "terraform", "init",
                "-input=false"
    }
}
